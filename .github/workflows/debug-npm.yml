name: Debug NPM Authentication

on:
  workflow_dispatch:
    inputs:
      debug_type:
        description: 'Type of debugging to perform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - auth
          - packages
          - publish

jobs:
  debug:
    name: Debug NPM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Configure npm
        run: |
          # Create .npmrc with the token
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc
          
          # Set npm configs explicitly
          npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
          npm config set registry https://registry.npmjs.org/
          npm config set always-auth true
          
          echo "=== NPM Configuration Step ==="
          echo "Created .npmrc file with token"
          echo "Token length in environment: ${#NPM_TOKEN}"
          echo "Contents of .npmrc (redacted):"
          cat ~/.npmrc | sed 's/_authToken=.*/_authToken=***/'
          
          # Verify npm can access the registry
          echo "=== Testing Registry Access ==="
          npm ping || echo "Registry ping failed"
        env:
          NPM_TOKEN: ${{ secrets.NPMTOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPMTOKEN }}

      - name: Install Dependencies
        run: bun install
        env:
          NPM_TOKEN: ${{ secrets.NPMTOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPMTOKEN }}

      - name: Check TEST Secret
        run: |
          echo "=== TEST Secret Check ==="
          if [ -z "$TEST" ]; then
            echo "❌ TEST secret is empty or not set"
            exit 1
          else
            echo "✅ TEST secret exists"
            echo "Value: $TEST"
          fi
        env:
          TEST: ${{ secrets.TEST }}

      - name: Check NPM Token Secret
        run: |
          echo "=== NPM Token Secret Check ==="
          if [ -z "$NPM_TOKEN" ]; then
            echo "❌ NPM_TOKEN secret is empty or not set"
            echo "Please set the NPM_TOKEN secret in your repository settings"
            echo "Go to: Settings → Secrets and variables → Actions"
            exit 1
          else
            echo "✅ NPM_TOKEN secret exists"
            echo "Token length: ${#NPM_TOKEN}"
            if [ ${#NPM_TOKEN} -eq 0 ]; then
              echo "❌ NPM_TOKEN secret is empty"
              echo "Please update the NPM_TOKEN secret with a valid npm token"
              exit 1
            else
              echo "✅ NPM_TOKEN secret has content"
            fi
          fi
          
          echo "=== Environment Variables Check ==="
          echo "NPM_TOKEN environment variable exists: $([ -n "$NPM_TOKEN" ] && echo "Yes" || echo "No")"
          echo "NPM_CONFIG_TOKEN environment variable exists: $([ -n "$NPM_CONFIG_TOKEN" ] && echo "Yes" || echo "No")"
          
          echo "=== .npmrc File Check ==="
          if [ -f ~/.npmrc ]; then
            echo "✅ .npmrc file exists"
            echo "Contents of .npmrc:"
            cat ~/.npmrc
          else
            echo "❌ .npmrc file does not exist"
          fi
          
          echo "=== Testing Token Format ==="
          # Check if token looks like a valid npm token (more permissive regex)
          if [[ "$NPM_TOKEN" =~ ^[A-Za-z0-9+/=_-]+$ ]]; then
            echo "✅ Token format looks valid (npm token format)"
          else
            echo "❌ Token format may be invalid"
            echo "Token should contain only alphanumeric, +, /, =, -, and _ characters"
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPMTOKEN }}

      - name: Debug NPM Authentication
        if: inputs.debug_type == 'all' || inputs.debug_type == 'auth'
        run: |
          echo "=== NPM Authentication Debug ==="
          
          echo "=== Environment Check ==="
          echo "NPM_TOKEN length: ${#NPM_TOKEN}"
          echo "NODE_AUTH_TOKEN length: ${#NODE_AUTH_TOKEN}"
          echo "HOME directory: $HOME"
          echo ".npmrc location: $(which npm)"
          
          echo "=== NPM Config Check ==="
          echo "Global .npmrc:"
          [ -f ~/.npmrc ] && cat ~/.npmrc | sed 's/_authToken=.*/_authToken=***/' || echo "No global .npmrc"
          echo "Project .npmrc:"
          [ -f ./.npmrc ] && cat ./.npmrc | sed 's/_authToken=.*/_authToken=***/' || echo "No project .npmrc"
          
          echo "=== NPM Registry Check ==="
          npm config get registry
          
          echo "=== Testing Authentication ==="
          # Try different auth methods
          echo "Method 1: npm whoami"
          npm whoami --verbose || echo "npm whoami failed"
          
          echo "Method 2: npm token list"
          npm token list --verbose || echo "npm token list failed"
          
          echo "Method 3: curl with Bearer token"
          curl -H "Authorization: Bearer ${NPM_TOKEN}" \
               -H "Accept: application/json" \
               -H "Content-Type: application/json" \
               "https://registry.npmjs.org/-/npm/v1/user" | jq '.' || echo "curl auth failed"
          
          echo "Method 4: curl with basic auth"
          echo -n ":${NPM_TOKEN}" | base64 | xargs -I {} \
          curl -H "Authorization: Basic {}" \
               -H "Accept: application/json" \
               "https://registry.npmjs.org/-/npm/v1/user" | jq '.' || echo "basic auth failed"
          
          echo "=== Organization Access Check ==="
          echo "Testing access to @cjkihl organization..."
          npm access ls-packages @cjkihl || echo "org access check failed"
          
          echo "=== Package Access Check ==="
          echo "Testing package read access..."
          npm view @cjkihl/create-exports || echo "package view failed"
        env:
          NPM_TOKEN: ${{ secrets.NPMTOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPMTOKEN }}

      - name: Test Token Directly
        if: inputs.debug_type == 'all' || inputs.debug_type == 'auth'
        run: |
          echo "=== Direct Token Testing ==="
          
          echo "=== Testing token with npm token command ==="
          npm token list || echo "npm token list failed"
          
          echo "=== Testing token with npm profile ==="
          npm profile get || echo "npm profile get failed"
          
          echo "=== Testing token with curl (detailed) ==="
          response=$(curl -s -w "\n%{http_code}" -H "Authorization: Bearer ${NPM_TOKEN}" \
               -H "Content-Type: application/json" \
               "https://registry.npmjs.org/-/npm/v1/user")
          
          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | head -n -1)
          
          echo "HTTP Status Code: $http_code"
          echo "Response Body:"
          echo "$body" | jq '.' || echo "$body"
          
          if [ "$http_code" = "200" ]; then
            echo "✅ Token is valid and working"
            username=$(echo "$body" | jq -r '.name // "unknown"')
            echo "Username: $username"
          else
            echo "❌ Token validation failed with status $http_code"
          fi
          
          echo "=== Testing organization access directly ==="
          org_response=$(curl -s -w "\n%{http_code}" -H "Authorization: Bearer ${NPM_TOKEN}" \
               -H "Content-Type: application/json" \
               "https://registry.npmjs.org/-/org/cjkihl/user")
          
          org_http_code=$(echo "$org_response" | tail -n1)
          org_body=$(echo "$org_response" | head -n -1)
          
          echo "Organization HTTP Status Code: $org_http_code"
          echo "Organization Response:"
          echo "$org_body" | jq '.' || echo "$org_body"
        env:
          NPM_TOKEN: ${{ secrets.NPMTOKEN }}

      - name: Debug Package Configuration
        if: inputs.debug_type == 'all' || inputs.debug_type == 'packages'
        run: |
          echo "=== Package Configuration Debug ==="
          echo "Root package.json:"
          cat package.json | jq '.name, .version, .publishConfig' || echo "Failed to read root package.json"
          
          echo "=== Checking workspace packages ==="
          for pkg in packages/*/package.json; do
            if [ -f "$pkg" ]; then
              echo "Package: $pkg"
              cat "$pkg" | jq '.name, .version, .publishConfig' || echo "Failed to read $pkg"
              echo "---"
            fi
          done
          
          echo "=== Checking registry access ==="
          echo "Testing access to @cjkihl scope..."
          npm access ls-packages || echo "npm access ls-packages failed"
          
          echo "=== Checking package access in organization ==="
          npm access ls-packages @cjkihl || echo "npm access ls-packages @cjkihl failed"
          
          echo "=== Checking if @cjkihl scope exists ==="
          curl -s "https://registry.npmjs.org/@cjkihl" | jq '.error // "Scope exists"' || echo "Failed to check scope"
        env:
          NPM_TOKEN: ${{ secrets.NPMTOKEN }}

      - name: Debug Publish Process
        if: inputs.debug_type == 'all' || inputs.debug_type == 'publish'
        run: |
          echo "=== Publish Process Debug ==="
          echo "Building packages..."
          bun run build
          
          echo "=== Testing npm publish dry-run ==="
          cd packages/create-exports
          npm publish --dry-run || echo "Dry-run failed"
          cd ../..
          
          echo "=== Testing changeset publish dry-run ==="
          bun run changeset publish --dry-run || echo "Changeset dry-run failed"
        env:
          NPM_TOKEN: ${{ secrets.NPMTOKEN }}

      - name: Generate Debug Summary
        run: |
          echo "## 🔍 NPM Debug Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Debug Type: ${{ inputs.debug_type }}" >> $GITHUB_STEP_SUMMARY
          echo "### Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Common Issues to Check:" >> $GITHUB_STEP_SUMMARY
          echo "1. **NPM Token Permissions**: Ensure token has publish access to @cjkihl organization" >> $GITHUB_STEP_SUMMARY
          echo "2. **Token Expiration**: Check if the token has expired" >> $GITHUB_STEP_SUMMARY
          echo "3. **Organization Access**: Verify token belongs to account with @cjkihl access" >> $GITHUB_STEP_SUMMARY
          echo "4. **Package Configuration**: Check package.json files for correct scope and version" >> $GITHUB_STEP_SUMMARY
          echo "5. **Registry Configuration**: Ensure npm is configured for the correct registry" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Review the debug output above" >> $GITHUB_STEP_SUMMARY
          echo "- Generate new npm token if needed: https://www.npmjs.com/settings/tokens" >> $GITHUB_STEP_SUMMARY
          echo "- Check organization settings: https://www.npmjs.com/settings/cjkihl/packages" >> $GITHUB_STEP_SUMMARY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPMTOKEN }} 